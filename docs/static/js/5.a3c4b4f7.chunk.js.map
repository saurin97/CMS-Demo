{"version":3,"sources":["shared/components/form/error.tsx","shared/components/form/option.tsx","shared/components/table/PbTable.tsx","shared/components/table/PbHead.tsx","shared/components/table/PbRow.tsx","shared/components/table/PbCell.tsx","shared/components/table/PbBody.tsx","shared/components/emptyDataContainer/emptyDataContainer.tsx","shared/components/table/tableEmptyContainer.tsx","shared/components/table/tableSpinner.tsx","shared/components/table/AdvancedPbHead.tsx","shared/components/table/index.ts","shared/components/form/inputTypes.tsx","shared/components/header/breadcrumbs.tsx","shared/components/header/header.tsx","features/customerDetail/component/customerDetailForm.tsx","features/customerDetail/component/customerDetailList.tsx","features/customerDetail/component/customerDetailModal.tsx","features/customerDetail/container/customerDetail.tsx"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","FieldErrorMessage","props","a","createElement","className","children","Option","value","name","TableTitle","react","join","data-testid","title","PbTable","PbHead","react_default","concat","dataTestId","PbRow","PbCell","onChangeInput","e","onInputChange","target","header","onClick","colSpan","rowSpan","style","input","inputLabel","dropDownOptions","placeholder","inputValue","onChange","disabled","map","option","form_option","Object","assign","key","PbBody","EmptyDataContainer","text","TableEmptyContainer","table_PbRow","table_PbCell","emptyDataContainer_emptyDataContainer","TableSpinner","spinner","React","Component","d","__webpack_exports__","PbTable_TableTitle","table_PbTable","table_PbHead","table_PbBody","tableEmptyContainer","tableSpinner","Input","InputDatePicker","date_fns_locale_en_GB__WEBPACK_IMPORTED_MODULE_1__","react_datepicker__WEBPACK_IMPORTED_MODULE_2__","react_datepicker__WEBPACK_IMPORTED_MODULE_2___default","formik__WEBPACK_IMPORTED_MODULE_3__","_error__WEBPACK_IMPORTED_MODULE_4__","_option__WEBPACK_IMPORTED_MODULE_5__","RenderInput","type","Fragment","showLabels","config","label","field","getValue","id","readOnly","autoComplete","component","checked","setFieldValue","htmlFor","hideErrorMessage","geCheckboxOptions","isChecked","toString","includes","evt","getCheckboxValue","placeHolder","otherOptions","isMultiSelect","slice","call","selectedOptions","multiple","geDropDownOptions","render","_ref","registerLocale","enGB","_ref2","RenderDatePicker","asterisk","todayButton","inline","locale","placeholderText","selected","Date","showMonthDropdown","showYearDropdown","showTimeSelect","minDate","maxDate","timeFormat","timeIntervals","dateFormat","dropdownMode","fixedHeight","index","indexOf","push","splice","checkboxOptions","undefined","Breadcrumbs","data","obj","Link","to","link","linkText","href","withRouter","breadcrumbs","provideBackBtn","form_button","history","goBack","btnType","DropDownOptions","formValidation","Yup","shape","companyId","required","errorMessages","strict","contactTitle","jobTitle","firstName","lastName","phoneNumber","contactMobile","NFDUserId","NFDUserPassword","matches","customPasswordMessage","emailAddress","email","CustomerDetailForm","formik_esm","initialValues","optOutOfPostalContact","optOutOfPhoneFax","optOutOfEmailsSMS","consentToUpdateNFD","onSubmit","handleSubmit","validationSchema","values","loading","inputTypes","INPUTFIELDS","inputItem","handelReset","CustomerDetailList","table","width","customerDetailList","length","customerDetail","abbr","changeActionType","CustomerDetailModal","CustomerDetail","state","addDetail","isModalOpen","actionType","selectedCustomer","_this","setState","handleCloseModel","_this2","this","_this$state","firstLevelBreadcrumbs","customerDetailForm","component_customerDetailList","modal","show","modalTitle","handleClose","customerDetailModal"],"mappings":"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","file":"static/js/5.a3c4b4f7.chunk.js","sourcesContent":["import React from 'react';\n// import { Translate } from '../translate';\n\n/**\n * common field error message component\n * @param props\n */\nconst FieldErrorMessage: React.FC<any> = (props) => (\n\t<p className='error'>\n\t\t{/* <Translate text={props.children} /> */}\n\t\t{props.children}\n\t</p>\n);\n\nexport default FieldErrorMessage;\n","import React from 'react';\n\ninterface Props {\n\tname: string;\n\tvalue: string | number;\n}\nconst Option: React.FC<Props> = (props) => {\n\treturn (\n\t\t<option value={props.value}>\n\t\t\t{props.name}\n\t\t</option>\n\t)\n}\nexport default Option;\n","import * as React from 'react';\n\ninterface Props {\n\tclassName?: string;\n\theader?: JSX.Element;\n\ttitle?: string;\n\t// chindren contains 2 elements\n\tchildren: JSX.Element[];\n}\n\nconst PbTable: React.FC<Props> = (props) => {\n\treturn (\n\t\t<div className='table-responsive'>\n\t\t\t<table className={['table table-bordered table-hover dataTables-example dataTable', props.className].join(' ')}>\n\t\t\t\t{/** first children must be Table Head */}\n\t\t\t\t{props.children[0]}\n\t\t\t\t{/** second children must be Table Body */}\n\t\t\t\t{props.children[1]}\n\t\t\t</table>\n\t\t</div>\n\t);\n}\n\ninterface TableTitleProps extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement> {\n\ttitle: string;\n}\n\nconst TableTitle = (props: TableTitleProps) => (\n\t<div className={[props.className, 'ibox-title'].join(' ')}>\n\t\t<h5 data-testid='module-title'>{props.title}</h5>\n\t\t<div className='justify-content-space-between'>\n\t\t\t{props.children}\n\t\t</div>\n\t</div>\n)\n\nexport default PbTable;\n\nexport { TableTitle }\n","import React from 'react'\n\nconst PbHead: React.FC<{\n\tdataTestId?: string\n}> = (props) => {\n\treturn (\n\t\t<thead data-testid={`${props.dataTestId || 'list-column-header'}`}>\n\t\t\t{props.children}\n\t\t</thead>\n\t)\n}\n\nexport default PbHead;\n","import React from 'react'\n\ninterface Props extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement> {\n\t'data-testid'?: string;\n}\n\nconst PbRow: React.FC<Props> = (props) => {\n\treturn (\n\t\t<tr {...props}>\n\t\t\t{props.children}\n\t\t</tr>\n\t)\n}\n\nexport default PbRow\n","import React from 'react';\nimport Option from '../form/option';\ninterface Props extends React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>,\n\tReact.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement> {\n\n\theader?: Boolean;\n\tonClick?: React.MouseEventHandler<any>;\n\tinput?: Boolean;\n\tdropDownOptions?: Array<{\n\t\tname: string;\n\t\tvalue: string;\n\t}>;\n\tinputValue?: string;\n\tplaceholder?: string;\n\tinputLabel?: string;\n\tdisabled?: boolean;\n\tonInputChange?: (text: string) => void;\n}\n\nconst PbCell: React.FC<Props> = props => {\n\tlet html: JSX.Element;\n\tconst onChangeInput = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n\t\tprops.onInputChange && props.onInputChange(e.target.value);\n\t};\n\tif (props.header) {\n\t\thtml = (\n\t\t\t<th\n\t\t\t\tclassName={`text-capitalize cursor-pointer ${props.className || ''}`}\n\t\t\t\tonClick={props.onClick}\n\t\t\t\tcolSpan={props.colSpan}\n\t\t\t\trowSpan={props.rowSpan}\n\t\t\t\tstyle={props.style}\n\t\t\t>\n\t\t\t\t{typeof props.children === 'string' ? props.children : props.children}\n\t\t\t</th>\n\t\t);\n\t} else if (props.input) {\n\t\thtml = (\n\t\t\t<td\n\t\t\t\tclassName={props.className}\n\t\t\t\trowSpan={props.rowSpan}\n\t\t\t\tcolSpan={props.colSpan}\n\t\t\t\tstyle={props.style}\n\t\t\t>\n\t\t\t\t{props.inputLabel ? <label className='mb-3'>{props.inputLabel}</label> : ''}\n\t\t\t\t{props.dropDownOptions ?\n\t\t\t\t\t<select\n\t\t\t\t\t\tplaceholder={props.placeholder || ''}\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tvalue={props.inputValue}\n\t\t\t\t\t\tonChange={onChangeInput}\n\t\t\t\t\t\tdisabled={props.disabled}\n\t\t\t\t\t>\n\t\t\t\t\t\t{props.dropDownOptions.map(option => <Option key={option.name}  {...option} />)}\n\t\t\t\t\t</select>\n\t\t\t\t\t:\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={props.inputValue || ''}\n\t\t\t\t\t\tonChange={onChangeInput}\n\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\tplaceholder={props.placeholder || ''}\n\t\t\t\t\t/>\n\t\t\t\t}\n\t\t\t</td>\n\t\t);\n\t} else {\n\t\thtml = (\n\t\t\t<td\n\t\t\t\tclassName={[props.className, 'Cell'].join(' ')}\n\t\t\t\tcolSpan={props.colSpan}\n\t\t\t\trowSpan={props.rowSpan}\n\t\t\t\tstyle={props.style}\n\t\t\t>\n\t\t\t\t{props.children}\n\t\t\t</td>\n\t\t);\n\t}\n\n\treturn html;\n};\nexport default PbCell;\n","import React from 'react'\n\nconst PbBody: React.FC<{\n\t'data-testid'?: string;\n}> = (props) => {\n\treturn (\n\t\t<tbody data-testid={`${props[\"data-testid\"] || 'list-rows'}`}>\n\t\t\t{props.children}\n\t\t</tbody>\n\t)\n}\n\nexport default PbBody;\n","import React from 'react';\nimport './emptyDataContainer.css';\n\ninterface EmptyDataContainerProps {\n\ttext?: string\n}\n\nconst EmptyDataContainer: React.FC<EmptyDataContainerProps> = (props) => {\n\treturn (\n\t\t<div className='empty-data-wrapper'>\n\t\t\t{props.text || 'No data found'}\n\t\t</div>\n\t)\n}\n\nexport default EmptyDataContainer;\n","import React from 'react';\nimport EmptyDataContainer from '../emptyDataContainer/emptyDataContainer';\nimport PbRow from './PbRow';\nimport PbCell from './PbCell';\n\ninterface Props extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement> {\n\ttext?: string;\n\tcolSpan: number;\n}\n\nconst TableEmptyContainer: React.FC<Props> = (props) => (\n\t<PbRow>\n\t\t<PbCell colSpan={props.colSpan}>\n\t\t\t<EmptyDataContainer\n\t\t\t\ttext={props.text} />\n\t\t</PbCell>\n\t</PbRow>\n)\n\nexport default TableEmptyContainer;\n","import React from 'react';\n\nimport Spinner from '../spinner/spinner';\nimport PbRow from './PbRow';\nimport PbCell from './PbCell';\n\nconst TableSpinner: React.FC<{ colSpan: number }> = (props) => (\n\t<PbRow>\n\t\t<PbCell colSpan={props.colSpan}>\n\t\t\t<Spinner />\n\t\t</PbCell>\n\t</PbRow>\n)\n\nexport default TableSpinner;\n","import React from 'react'\nimport PbCell from './PbCell';\n\ninterface Column {\n\tsort?: boolean,\n\tname: string\n}\n\ninterface Props extends React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement> {\n\tcolumn: Column;\n\tonSort?: (column: string) => void;\n\torderBy: string | null;\n\torder: string | null;\n}\n\nclass AdvancedPbHead extends React.Component<Props> {\n\trender() {\n\t\treturn (\n\t\t\t<PbCell\n\t\t\t\tclassName={[this.props.className, this.getCellClasses(this.props.column)].join(' ')}\n\t\t\t\tonClick={() => this.onClickCell(this.props.column)}\n\t\t\t\theader={true}\n\t\t\t>\n\t\t\t\t{this.props.children}\n\t\t\t</PbCell>\n\t\t)\n\t}\n\n\tonClickCell = (column: Column) => {\n\t\tif (!column.sort) {\n\t\t\treturn;\n\t\t}\n\t\tthis.props.onSort && this.props.onSort(column.name);\n\t}\n\n\tgetCellClasses = (column: Column): string => {\n\t\tif (!column.sort) {\n\t\t\treturn '';\n\t\t}\n\t\tif (column.sort && this.props.orderBy === column.name) {\n\t\t\treturn this.props.order === 'asc' ? 'sorting_asc' : 'sorting_desc'\n\t\t} else {\n\t\t\treturn 'sorting'\n\t\t}\n\t}\n}\n\nexport default AdvancedPbHead;\n","import PbTable, { TableTitle } from './PbTable';\nimport PbHead from './PbHead';\nimport PbRow from './PbRow';\nimport PbCell from './PbCell';\nimport PbBody from './PbBody';\nimport TablePagination from './pagination';\nimport TableEmptyContainer from './tableEmptyContainer';\nimport TableSpinner from './tableSpinner';\nimport AdvancedPbHead from './AdvancedPbHead';\n\nexport {\n\tTableTitle,\n\tPbTable,\n\tPbHead,\n\tPbRow,\n\tPbCell,\n\tPbBody,\n\tTablePagination,\n\tTableEmptyContainer,\n\tTableSpinner,\n\tAdvancedPbHead\n};\n","import React, { ChangeEventHandler } from 'react';\nimport enGB from 'date-fns/locale/en-GB';\nimport DatePicker, { registerLocale } from 'react-datepicker';\nimport { Field, ErrorMessage, FieldProps, FormikValues } from 'formik';\nimport FieldErrorMessage from './error';\nimport Option from './option';\nimport 'react-datepicker/dist/react-datepicker.css';\nexport interface DropDownAndCheckboxOptions {\n\tname: string;\n\tvalue: string | number;\n}\nexport interface FieldConfig {\n\ttype: 'text' | 'textarea' | 'email' | 'password' | 'number' | 'dropdown' | 'checkbox' | 'dropdown' | 'radio';\n\tlabel: string;\n\tname: string;\n\tclassName?: string;\n\tplaceHolder?: string;\n\totherOptions?: {\n\t\tdropDownOptions?: DropDownAndCheckboxOptions[];\n\t\tcheckboxOptions?: DropDownAndCheckboxOptions[];\n\t\tisMultiSelect?: boolean;\n\t};\n\thideErrorMessage?: boolean;\n}\ninterface TextFieldProps {\n\tname: string;\n\tplaceholder: string;\n\tconfig: FieldConfig;\n\tvalue?: any;\n\tsetFieldValue: (field: string, value: any) => void;\n\treadOnly?: boolean;\n\ttype?: 'text' | 'textarea' | 'email' | 'password' | 'number' | 'checkbox' | 'dropdown' | 'radio';\n\tclassName?: string;\n\tautoComplete?: string;\n\tshowLabels?: boolean;\n\tonChange?: ChangeEventHandler<any>;\n}\n\nconst RenderInput: React.FC<TextFieldProps & { field: any }> = props => {\n\tswitch (props.type) {\n\t\t// render text input in case of text, textarea, email, password and number\n\t\tcase 'textarea':\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{props.showLabels && props.config.label &&\n\t\t\t\t\t\t<label className='text-capitalize input-label-wrapper'>\n\t\t\t\t\t\t\t{props.config.label}\n\t\t\t\t\t\t</label>}\n\t\t\t\t\t<textarea\n\t\t\t\t\t\t{...props.field}\n\t\t\t\t\t\tvalue={getValue(props.field.value)}\n\t\t\t\t\t\tid={props.name}\n\t\t\t\t\t\tclassName={`${props.className || ''} form-control`}\n\t\t\t\t\t\tplaceholder={props.placeholder}\n\t\t\t\t\t\treadOnly={props.readOnly}\n\t\t\t\t\t\tautoComplete={`${props.autoComplete || 'off'}`}\n\t\t\t\t\t/>\n\t\t\t\t\t<ErrorMessage name={props.config.name} component={FieldErrorMessage} />\n\t\t\t\t</>\n\t\t\t);\n\t\tcase 'text':\n\t\tcase 'email':\n\t\tcase 'password':\n\t\tcase 'number':\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t{props.showLabels && props.config.label &&\n\t\t\t\t\t\t<label className='text-capitalize input-label-wrapper'>\n\t\t\t\t\t\t\t{props.config.label}\n\t\t\t\t\t\t</label>}\n\t\t\t\t\t<input\n\t\t\t\t\t\t{...props.field}\n\t\t\t\t\t\tvalue={getValue(props.field.value)}\n\t\t\t\t\t\tid={props.name}\n\t\t\t\t\t\ttype={props.type}\n\t\t\t\t\t\tclassName={`${props.className || ''} form-control`}\n\t\t\t\t\t\tplaceholder={props.placeholder}\n\t\t\t\t\t\treadOnly={props.readOnly}\n\t\t\t\t\t\tautoComplete={`${props.autoComplete || 'off'}`}\n\t\t\t\t\t/>\n\t\t\t\t\t<ErrorMessage name={props.config.name} component={FieldErrorMessage} />\n\t\t\t\t</>\n\t\t\t);\n\t\tcase 'radio':\n\t\t\treturn (\n\t\t\t\t<div className='radio-input-wrapper'>\n\t\t\t\t\t<input\n\t\t\t\t\t\t{...props.field}\n\t\t\t\t\t\ttype='radio'\n\t\t\t\t\t\tid={props.name + props.value}\n\t\t\t\t\t\tname={props.name}\n\t\t\t\t\t\tchecked={props.field.value === props.value}\n\t\t\t\t\t\tvalue={props.value}\n\t\t\t\t\t\tonChange={() => props.setFieldValue(props.name, props.value)}\n\t\t\t\t\t/>\n\t\t\t\t\t<label\n\t\t\t\t\t\tclassName={`pointer text--secondary font--medium ${props.field.value === props.value ? 'checked' : ''}\n\t\t\t\t\t\t${props.className ? props.className : ''}`}\n\t\t\t\t\t\thtmlFor={props.name + props.value}\n\t\t\t\t\t>\n\t\t\t\t\t\t{props.children}\n\t\t\t\t\t</label>\n\t\t\t\t\t{!props.config.hideErrorMessage && <ErrorMessage name={props.config.name} component={FieldErrorMessage} />}\n\t\t\t\t</div>\n\t\t\t);\n\t\tcase 'checkbox':\n\t\t\treturn (\n\t\t\t\t<div className='form-group d-flex align-items-baseline'>\n\t\t\t\t\t{props.config.label &&\n\t\t\t\t\t\t<label className='text-capitalize col-xs-4 col-sm-2 control-label'>\n\t\t\t\t\t\t\t{props.config.label}\n\t\t\t\t\t\t</label>}\n\t\t\t\t\t<div className='checkbox-wrapper col-xs-8 col-sm-10'>\n\t\t\t\t\t\t{geCheckboxOptions(props.config).map(option => {\n\t\t\t\t\t\t\tconst setCheckboxvalue: ChangeEventHandler<HTMLInputElement> = evt => {\n\t\t\t\t\t\t\t\tprops.setFieldValue(props.config.name, getCheckboxValue(props.field, evt));\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tconst isChecked = (props.field.value || []).map((key: any) => (key || '').toString()).includes(option.value.toString());\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<div className='checkbox-content' key={option.value}>\n\t\t\t\t\t\t\t\t\t<label className='text-capitalize checkbox-label'>\n\t\t\t\t\t\t\t\t\t\t{option.name}\n\t\t\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\t\t\tplaceholder={option.name}\n\t\t\t\t\t\t\t\t\t\t\tchecked={isChecked}\n\t\t\t\t\t\t\t\t\t\t\tonChange={setCheckboxvalue}\n\t\t\t\t\t\t\t\t\t\t\ttype='checkbox'\n\t\t\t\t\t\t\t\t\t\t\tname={option.name}\n\t\t\t\t\t\t\t\t\t\t\tvalue={option.value} />\n\t\t\t\t\t\t\t\t\t\t<span className='checkmark' />\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</div>\n\t\t\t\t\t<ErrorMessage name={props.config.name} component={FieldErrorMessage} />\n\t\t\t\t</div>\n\t\t\t);\n\n\t\t// render dorpdown when dropdown type is provided\n\t\tcase 'dropdown':\n\t\t\tconst setDropdownValue: ChangeEventHandler<any> = evt => {\n\t\t\t\tif ((props.config.otherOptions || {}).isMultiSelect) {\n\t\t\t\t\tprops.setFieldValue(props.config.name, [].slice.call(evt.target.selectedOptions).map((option: any) => option.value));\n\t\t\t\t} else {\n\t\t\t\t\tprops.setFieldValue(props.config.name, evt.target.value);\n\t\t\t\t}\n\t\t\t\tif (props.onChange) {\n\t\t\t\t\tprops.onChange(evt);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn (\n\t\t\t\t<div className='row'>\n\t\t\t\t\t{props.config.label &&\n\t\t\t\t\t\t<label className='text-capitalize col-sm-12 control-label'>\n\t\t\t\t\t\t\t{props.config.label}\n\t\t\t\t\t\t</label>}\n\t\t\t\t\t<div className='col-sm-12'>\n\t\t\t\t\t\t<select\n\t\t\t\t\t\t\tplaceholder={props.config.placeHolder || props.config.label}\n\t\t\t\t\t\t\tvalue={props.field.value}\n\t\t\t\t\t\t\tonChange={setDropdownValue}\n\t\t\t\t\t\t\tname={props.config.name}\n\t\t\t\t\t\t\tclassName='form-control'\n\t\t\t\t\t\t\tmultiple={(props.config.otherOptions || {}).isMultiSelect}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<option value=''>---SELECT---</option>\n\t\t\t\t\t\t\t{geDropDownOptions(props.config).map(option => (\n\t\t\t\t\t\t\t\t<Option key={option.name} name={option.name} value={option.value} />\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t\t<ErrorMessage name={props.config.name} component={FieldErrorMessage} />\n\t\t\t\t\t</div>\n\t\t\t\t</div >\n\t\t\t);\n\t\tdefault:\n\t\t\treturn <></>;\n\t}\n};\n\n/**\n * common input field component\n * renders input based on the field configuration\n * @param props { field, form: { touched, errors }, ...props }\n */\nconst Input: React.FC<TextFieldProps> = props => {\n\tconst fieldRender = ({ field }: { field: any }) => {\n\t\treturn <RenderInput {...props} field={field} />;\n\t};\n\n\treturn (\n\t\t<Field\n\t\t\tname={props.name}\n\t\t\trender={fieldRender}\n\t\t/>\n\t);\n};\n\nconst InputDatePicker: React.FC<FieldProps<FormikValues> & any> = props => {\n\tregisterLocale('en-gb', enGB);\n\tconst fieldRender = ({ field }: { field: any }) => {\n\t\treturn <RenderDatePicker {...props} field={field} />;\n\t};\n\treturn (\n\t\t<Field\n\t\t\tname={props.name}\n\t\t\trender={fieldRender}\n\t\t/>\n\t);\n};\n\nconst RenderDatePicker = (props: any) => (\n\t<>\n\t\t{props.label &&\n\t\t\t<label className='text-capitalize input-label-wrapper'>\n\t\t\t\t{props.label}\n\t\t\t\t{props.asterisk && <span className='required'>*</span>}\n\t\t\t</label>}\n\t\t<DatePicker\n\t\t\t{...props.field}\n\t\t\ttodayButton={'Today'}\n\t\t\tinline={props.inline}\n\t\t\tclassName='form-control custom-datepicker'\n\t\t\tautoComplete='off'\n\t\t\tlocale='en-gb'\n\t\t\tplaceholderText={props.placeHolder || ''}\n\t\t\tselected={props.field.value && new Date(props.field.value)}\n\t\t\tonChange={props.onChange}\n\t\t\tshowMonthDropdown\n\t\t\tshowYearDropdown\n\t\t\tshowTimeSelect={props.showTimeSelect ? true : false}\n\t\t\tminDate={props.minDate}\n\t\t\tmaxDate={props.maxDate}\n\t\t\ttimeFormat={props.timeFormat || 'p'}\n\t\t\ttimeIntervals={props.timeIntervals || 15}\n\t\t\tdateFormat={props.dateFormat || 'Pp'}\n\t\t\tdropdownMode='select'\n\t\t\tfixedHeight\n\t\t/>\n\t\t<ErrorMessage name={props.name} component={FieldErrorMessage} />\n\t</>\n);\n\n/**\n * getCheckboxValue - returns check box value, after changing value with change event of html input element\n * @param field - field returned by formik\n * @param evt - html input change event, linked with checkbox input\n */\nconst getCheckboxValue = (field: any, evt: React.ChangeEvent<HTMLInputElement>) => {\n\t// if field value is empty, or null initially, assign it as empty array of strings\n\tif (!field.value) {\n\t\tfield.value = [];\n\t}\n\tconst index = field.value.indexOf(evt.target.value.toString());\n\t// if event gives `checked` = true, push target value to field value\n\tif (evt.target.checked) {\n\t\tfield.value.push(evt.target.value.toString());\n\t} else if (index !== -1) {\n\t\t// else remove target value from field value\n\t\tfield.value.splice(index, 1);\n\t}\n\t// return value\n\treturn field.value;\n};\n\nconst geDropDownOptions = (config: FieldConfig) => {\n\treturn ((config.otherOptions || {}).dropDownOptions || []);\n};\n\nconst geCheckboxOptions = (config: FieldConfig) => {\n\treturn ((config.otherOptions || {}).checkboxOptions || []);\n};\n\nconst getValue = (value?: string | number) => {\n\tif (value === undefined || value === null) {\n\t\treturn '';\n\t}\n\treturn value;\n};\n\nexport {\n\tInput,\n\tInputDatePicker\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\ninterface BreadCrumbsProps {\n\ttitle: string;\n\ttext?: string;\n\tlinkText?: { name: string; link: string };\n\tdata: { name: string; link: string; }[]\n}\n\nconst Breadcrumbs: React.FC<BreadCrumbsProps> = (props) => (\n\t<div className='col-lg-6 col-md-6 col-sm-6'>\n\t\t<h2 className='text-capitalize' data-testid=\"breadcrumb-title\">\n\t\t\t{props.title}\n\t\t</h2>\n\t\t<ol className='breadcrumb text-capitalize'>\n\t\t\t{\n\t\t\t\tprops.data.map(obj => (\n\t\t\t\t\t<li key={obj.name}>\n\t\t\t\t\t\t<Link to={obj.link}>\n\t\t\t\t\t\t\t{obj.name}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</li>\n\t\t\t\t))\n\t\t\t}\n\t\t\t<li className='active'>\n\t\t\t\t<strong>\n\t\t\t\t\t{props.text || props.title}\n\t\t\t\t</strong>\n\t\t\t</li>\n\t\t\t&nbsp;\n\t\t\t{props.linkText && props.linkText.name &&\n\t\t\t\t<a href={props.linkText.link} target=\"blank\">({props.linkText.name})</a>\n\t\t\t}\n\t\t</ol>\n\t</div>\n)\n\nexport default Breadcrumbs;\n","import React from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\n\nimport Button from '../form/button';\nimport Breadcrumbs from './breadcrumbs';\n\ninterface Props {\n\ttitle: string;\n\ttext?: string;\n\tlinkText?: { name: string; link: string };\n\tdata: { name: string; link: string; }[];\n\tprovideBackBtn?: boolean;\n}\n\nconst Header: React.FC<Props & RouteComponentProps> = props => (\n\t<div>\n\t\t<div className='row wrapper border-bottom white-bg page-heading'>\n\t\t\t<Breadcrumbs {...props} />\n\t\t\t<div className='col-lg-6 col-md-6 col-sm-6'>\n\t\t\t\t{props.provideBackBtn &&\n\t\t\t\t\t<div className='breadcrumb-btn'>\n\t\t\t\t\t\t<Button className='back-btn width-100px' onClick={props.history.goBack} btnType='info'>\n\t\t\t\t\t\t\tBack\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>}\n\t\t\t\t{props.children}\n\t\t\t</div>\n\t\t</div>\n\t</div>\n);\n\nexport default withRouter(Header);\n","import React from 'react';\nimport { ErrorMessage, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport Button from 'shared/components/form/button';\nimport FieldErrorMessage from 'shared/components/form/error';\nimport { Input } from 'shared/components/form/inputTypes';\nimport Spinner from 'shared/components/spinner/spinner';\nimport { errorMessages } from 'shared/constants/messages';\n\ninterface Props {\n    loading: boolean\n    handleSubmit: (initialValues: any) => void;\n    handelReset: () => void;\n}\n\nconst DropDownOptions = [\n\t{ name: 'ENERGY', value: 'ENERGY' },\n\t{ name: 'QUESTION', value: 'QUESTION' },\n];\n\n\nconst CustomerDetailForm: React.FC<Props> = (props) => {\n    const initialValues = {\n        companyId: '',\n        contactTitle: '',\n        jobTitle: '',\n        firstName: '',\n        lastName: '',\n        phoneNumber: '',\n        contactMobile: '',\n        NFDUserId: '',\n        NFDUserPassword: '',\n        emailAddress: '',\n        optOutOfPostalContact: false,\n        optOutOfPhoneFax: false,\n        optOutOfEmailsSMS: false,\n        consentToUpdateNFD: false,\n    };\n    \n    return (\n        <Formik\n\t\t\t\tinitialValues={initialValues}\n\t\t\t\tonSubmit={(initialValues) => props.handleSubmit(initialValues)}\n\t\t\t\tvalidationSchema={formValidation}\n\t\t\t>\n\t\t\t\t{({ handleSubmit, setFieldValue, values}) => (\n\t\t\t\t\t<form onSubmit={handleSubmit} className='media-form'>\n\t\t\t\t\t\t<fieldset className='row'>\n\t\t\t\t\t\t\t{props.loading && <div className='form-loading d-flex justify-content-center align-items--center'>\n\t\t\t\t\t\t\t\t<Spinner />\n\t\t\t\t\t\t\t</div>}\n\n                            <div className='form-group col-xs-12 col-sm-12 col-md-6'>\n                                <Input\n                                    type='dropdown'\n                                    name='companyId'\n                                    placeholder='Company ID'\n                                    showLabels\n                                    setFieldValue={setFieldValue}\n                                    config={{ type: 'dropdown', label: 'Company ID', name: 'companyId', otherOptions: { dropDownOptions: DropDownOptions } }}\n                                />\n                            </div>\n\n                            {INPUTFIELDS.map((inputItem: any) => (\n                                <div className='form-group col-xs-12 col-sm-12 col-md-6' key={inputItem.key}>\n                                    <Input\n                                        type={inputItem.type}\n                                        name={inputItem.key}\n                                        placeholder={inputItem.placeHolder}\n                                        showLabels\n                                        setFieldValue={setFieldValue}\n                                        config={{ type: inputItem.type, label: inputItem.placeHolder, name: inputItem.key }}\n                                    />\n    \t\t\t\t\t\t\t\t<ErrorMessage name={`mediaContent.${inputItem.key}`} component={FieldErrorMessage} />\n                                </div>\n                            ))}\n\n                            <div className='form-group col-xs-12 col-sm-6 col-md-3'>\n                                <div className='checkbox-content'>\n                                    <label className='text-capitalize input-label-wrapper d-block   full-width'>optOutOfPostalContact</label>\n                                    <label className='switch no-margins' >\n                                        <input\n                                            placeholder={'switch'}\n                                            type='checkbox'\n                                            onChange={() => setFieldValue('optOutOfPostalContact',!values.optOutOfPostalContact)}\n                                        />\n                                        <small />\n                                    </label>\n                                </div>\n                                <ErrorMessage name='mediaContent.optOutOfPostalContact' component={FieldErrorMessage} />\n                            </div>\n\n                            <div className='form-group col-xs-12 col-sm-6 col-md-3'>\n                                <div className='checkbox-content'>\n                                    <label className='text-capitalize input-label-wrapper d-block   full-width'>optOutOfPhoneFax</label>\n                                    <label className='switch no-margins' >\n                                        <input\n                                            placeholder={'switch'}\n                                            type='checkbox'\n                                            onChange={() => setFieldValue('optOutOfPhoneFax',!values.optOutOfPhoneFax)}\n                                        />\n                                        <small />\n                                    </label>\n                                </div>\n                                <ErrorMessage name='mediaContent.optOutOfPhoneFax' component={FieldErrorMessage} />\n                            </div>\n\n                            <div className='form-group col-xs-12 col-sm-6 col-md-3'>\n                                <div className='checkbox-content'>\n                                    <label className='text-capitalize input-label-wrapper d-block   full-width'>optOutOfEmailsSMS</label>\n                                    <label className='switch no-margins' >\n                                        <input\n                                            placeholder={'switch'}\n                                            type='checkbox'\n                                            onChange={() => setFieldValue('optOutOfEmailsSMS',!values.optOutOfEmailsSMS)}\n                                        />\n                                        <small />\n                                    </label>\n                                </div>\n                                <ErrorMessage name='mediaContent.optOutOfEmailsSMS' component={FieldErrorMessage} />\n                            </div>\n\n                            <div className='form-group col-xs-12 col-sm-6 col-md-3'>\n                                <div className='checkbox-content'>\n                                    <label className='text-capitalize input-label-wrapper d-block   full-width'>consentToUpdateNFD</label>\n                                    <label className='switch no-margins' >\n                                        <input\n                                            placeholder={'switch'}\n                                            type='checkbox'\n                                            onChange={() => setFieldValue('consentToUpdateNFD',!values.consentToUpdateNFD)}\n                                        />\n                                        <small />\n                                    </label>\n                                </div>\n                                <ErrorMessage name='mediaContent.consentToUpdateNFD' component={FieldErrorMessage} />\n                            </div>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<div className='col-xs-12 col-sm-12 col-md-12 mt-5'>\n\t\t\t\t\t\t\t\t<Button className='' type='submit' disabled={props.loading} btnType='primary'>Add Customer</Button>\n\n                                <Button\n                                    className='ml-20'\n                                    type='button'\n                                    disabled={props.loading}\n                                    btnType='danger'\n                                    onClick={props.handelReset}\n                                >\n                                    Cancel\n                                </Button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t</form>\n\t\t\t\t)}\n\t\t\t</Formik>\n    )\n}\n\nconst formValidation = Yup.object().shape({\n    companyId: Yup.string().required(errorMessages.required('companyId')).strict(true),\n    contactTitle: Yup.string().required(errorMessages.required('contactTitle')).strict(true),\n    jobTitle: Yup.string().required(errorMessages.required('jobTitle')).strict(true),\n    firstName: Yup.string().required(errorMessages.required('firstName')).strict(true),\n    lastName: Yup.string().required(errorMessages.required('lastName')).strict(true),\n    phoneNumber: Yup.number().required(errorMessages.required('phoneNumber')).strict(true),\n    contactMobile: Yup.number().required(errorMessages.required('contactMobile')).strict(true),\n    NFDUserId: Yup.string().required(errorMessages.required('NFDUserId')).strict(true),\n    NFDUserPassword: Yup.string()\n\t\t.required(errorMessages.required('NFDUserPassword')).strict(true)\n\t\t.matches(/(?=.*\\d)(?!.*[\\s])(?=.*[a-z])(?=.*[A-Z])(?=.*\\W).{8,}/, errorMessages.customPasswordMessage),\n    emailAddress: Yup.string()\n        .email('Invalid email')\n        .required(errorMessages.required('Email Address')),\n})\n\nexport default CustomerDetailForm;\n\nconst INPUTFIELDS = [ \n    { key: 'contactTitle', type: 'text', placeHolder: 'Contact Title' }, \n    { key: 'jobTitle', type: 'text', placeHolder: 'Job Title' }, \n    { key: 'firstName', type: 'text', placeHolder: 'First Name' }, \n    { key: 'lastName', type: 'text', placeHolder: 'Last Name' }, \n    { key: 'phoneNumber', type: 'number', placeHolder: 'Phone Number' }, \n    { key: 'contactMobile', type: 'number', placeHolder: 'Contact Mobile' }, \n    { key: 'NFDUserId', type: 'text', placeHolder: 'NFD User ID' }, \n    { key: 'NFDUserPassword', type: 'text', placeHolder: 'NFD User Password' }, \n    { key: 'emailAddress', type: 'text', placeHolder: 'Email Address' }\n]\n","import React from 'react';\nimport Button from 'shared/components/form/button';\nimport { PbBody, PbCell, PbHead, PbRow, PbTable, TableEmptyContainer, TableSpinner } from 'shared/components/table';\n\ninterface Props {\n    customerDetailList: [];\n    loading: boolean;\n    changeActionType: (actinTpe: string, selectedCustomer: string) => void;\n}\n\nconst CustomerDetailList: React.FC<Props> = (props) => {\n    return (\n        <PbTable>\n\t\t\t<PbHead>\n\t\t\t\t<PbRow>\n\t\t\t\t\t<PbCell style={{ width: '25px' }} header>No.</PbCell>\n\t\t\t\t\t<PbCell header>Company ID</PbCell>\n\t\t\t\t\t<PbCell header>Name</PbCell>\n\t\t\t\t\t<PbCell header>Job title</PbCell>\n\t\t\t\t\t<PbCell className='text-center' style={{ width: '200px' }} header>Actions</PbCell>\n\t\t\t\t</PbRow>\n\t\t\t</PbHead>\n\t\t\t<PbBody>\n\t\t\t\t{props.loading && <TableSpinner colSpan={5} />}\n\t\t\t\t{!props.loading && !props.customerDetailList.length && <TableEmptyContainer colSpan={5} text={`No Customer content found`} />}\n\t\t\t\t{!props.loading && props.customerDetailList.length > 0 && \n                    props.customerDetailList.map((customerDetail: any, index: number) => {\n                        return (\n                            <PbRow key={index}>\n                                <PbCell>{index + 1}</PbCell>\n                                <PbCell>{customerDetail.companyId}</PbCell>\n                                <PbCell>{`${customerDetail.firstName} ${customerDetail.lastName}`}</PbCell>\n                                <PbCell>{customerDetail.jobTitle}</PbCell>\n                    \n                                <PbCell className='text-center'>\n                                    <Button\n                                        abbr='View'\n                                        className='action-btn'\n                                        btnType='primary'\n                                        onClick={() => props.changeActionType('view', `${index}`)}\n                                    >\n                                        <i className='fa fa-eye' />\n                                    </Button>\n                                </PbCell>\n                            </PbRow>\n                        )\n                    })\n                }\n\t\t\t</PbBody>\n\t\t</PbTable>\n    )\n}\n\nexport default CustomerDetailList;","import React from 'react';\n\ninterface Props {\n    customerDetail: any;\n}\n\nconst CustomerDetailModal: React .FC<Props> = (props) => (\n    <div className='row'>\n        <div className='col-xs-12 col-sm-12 col-md-12 col-lg-6'>\n            <p>Company ID -  <b>{props.customerDetail.companyId}</b></p>\n            <p>First Name -  <b>{props.customerDetail.firstName}</b></p>\n            <p>Last Name -  <b>{props.customerDetail.lastName}</b></p>\n            <p>E-mail Address -  <b>{props.customerDetail.emailAddress}</b></p>\n            <p>Job Title -  <b>{props.customerDetail.jobTitle}</b></p>\n            <p>Contact Title -  <b>{props.customerDetail.contactTitle}</b></p>\n            <p>Password -  <b>{props.customerDetail.NFDUserPassword}</b></p>\n        </div>\n        <div className='col-xs-12 col-sm-12 col-md-12 col-lg-6'>\n            <p>NFD User ID -  <b>{props.customerDetail.NFDUserId}</b></p>\n            <p>Phone Number -  <b>{props.customerDetail.phoneNumber}</b></p>\n            <p>Mobile -  <b>{props.customerDetail.contactMobile}</b></p>\n\n            <p>consentToUpdateNFD -  <b className={`badge badge-${props.customerDetail.consentToUpdateNFD ? 'success' : 'danger'}`}>{props.customerDetail.consentToUpdateNFD ? 'YES' : 'NO'}</b></p>\n            \n            <p>optOutOfEmailsSMS -  <b className={`badge badge-${props.customerDetail.optOutOfEmailsSMS ? 'success' : 'danger'}`}>{props.customerDetail.optOutOfEmailsSMS ? 'YES' : 'NO'}</b></p>\n            \n            <p>optOutOfPhoneFax -  <b className={`badge badge-${props.customerDetail.optOutOfPhoneFax ? 'success' : 'danger'}`}>{props.customerDetail.optOutOfPhoneFax ? 'YES' : 'NO'}</b></p>\n            \n            <p>optOutOfPostalContact -  <b className={`badge badge-${props.customerDetail.optOutOfPostalContact ? 'success' : 'danger'}`}>{props.customerDetail.optOutOfPostalContact ? 'YES' : 'NO'}</b></p>\n        </div>\n    </div>    \n)\n\nexport default CustomerDetailModal;","import React, { Component } from 'react';\nimport { RouteComponentProps, withRouter } from 'react-router';\n\nimport { TableTitle } from 'shared/components/table';\nimport { firstLevelBreadcrumbs } from 'shared/constants/constants';\nimport Header from 'shared/components/header/header';\nimport CustomerDetailForm from '../component/customerDetailForm';\nimport CustomerDetailList from '../component/customerDetailList';\nimport Button from 'shared/components/form/button';\nimport Modal from 'shared/components/modal/modal';\nimport CustomerDetailModal from '../component/customerDetailModal';\n\n\ninterface UIState {\n    loading: boolean;\n    addDetail: boolean;\n    customerDetailList: any;\n    isModalOpen: boolean;\n    actionType: string;\n    selectedCustomer: string;\n}\n\nclass CustomerDetail extends Component<RouteComponentProps> {\n    state: UIState = {\n        loading: false,\n        addDetail: false,\n        customerDetailList: [],\n        isModalOpen: false,\n        actionType: '',\n        selectedCustomer: ''\n    }\n\n    render () {\n        const { addDetail, customerDetailList, loading, actionType, isModalOpen, selectedCustomer } = this.state;\n        \n        return (\n            <>\n                <Header data={firstLevelBreadcrumbs} title={`${addDetail ? 'Add Customer' : 'Customer Detail List' }`}>\n                    {!addDetail &&\n                        <div className='breadcrumb-btn'>\n                            <Button className='mr-2' btnType='primary' onClick={() => this.setState({ addDetail: true })}>\n                                Add Customer\n                            </Button>\n                        </div>\n                    }\n                </Header>\n\t\t\t\t<div className='row mt-3'>\n\t\t\t\t\t<div className='col-lg-12'>\n\t\t\t\t\t\t<div className='ibox float-e-margins'>\n\t\t\t\t\t\t\t<TableTitle title={`${addDetail ? 'Add Customer' : 'Customer Details' }`} className='text-capitalize' />\n\n\t\t\t\t\t\t\t<div className='ibox-content'>\n                                {addDetail && \n                                    <CustomerDetailForm\n                                        loading={this.state.loading}\n                                        handleSubmit={this.handleSubmit}\n                                        handelReset={() => this.setState({ addDetail: false })}\n                                    />\n                                }\n                                {!addDetail &&\n                                    <CustomerDetailList\n                                        customerDetailList = {customerDetailList}\n                                        loading= {loading}\n                                        changeActionType={this.changeActionType}\n                                    />\n                                }\n                                \n                                {actionType === 'view' && isModalOpen && \n                                    <Modal\n                                        show={true}\n                                        modalTitle='Customer Detail'\n                                        handleClose={this.handleCloseModel}\n                                    >\n                                        <CustomerDetailModal\n                                            customerDetail ={customerDetailList[selectedCustomer]}\n                                        />\n                                    </Modal>\n                                }\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n            </>\n        )\n    }\n\n    handleSubmit= (values: any) => {\n        const customerDetailList = this.state.customerDetailList;\n        customerDetailList.push(values)\n\n        this.setState({ customerDetailList, addDetail: false })\n    }\n\n    changeActionType = (actionType: string, selectedCustomer: any) => {\n        this.setState({ isModalOpen: true, actionType, selectedCustomer})\n    }\n\n    handleCloseModel = () => this.setState({ isModalOpen: false, actionType: ''});\n}\n\nexport default withRouter(CustomerDetail);"],"sourceRoot":""}